JavaScript
	是一种轻量级脚本语言（脚本语言是指不具备开发操作系统的能力，只能编写其他控制大型应用程序的"脚本"）
	语法角度看是一种对象模型语言
	js核心语法部分
		基本语法结构（如操作符、控制结构、语句）
		标准库（一系列具有各种功能的对象如Array、Date、Math）
	浏览器提供额外API
		浏览器控制类：操作浏览器
		DOM类：操作网页的各种元素
		WEB类：实现互联网的各种功能

	语句
		语句是为了完成某种任务而进行的操作
		以分号结尾，一个分号表示一个语句结束
		var a = 1+3; var b = "abc";
	
	变量
		变量是对值的引用，使用变量等同于引用一个值
		变量使用分为两步：声明和赋值
		声明变量使用 var关键字，不使用即声明为全局变量
		声明变量没有进行赋值，变量的值为undefined
		变量未声明就使用，会出现错误
		使用var声明的变量存在变量提升（js引擎工作方式是先解析，获取所有被声明的变量，在一行行执行，会将所有变量的声明语句提升到代码头部）
		
	标识符
		用来识别具体对象的一个名称（如变量名、函数名）
		命名规则：
			由字母、数字、下划线和美元符组成
			不能以数字开头，中文也是合法的
			不能是保留字
	
	注释
		对代码进行解释，js引擎忽略的部分
		单行注释	//		<!--  -->（历史上js兼容HTML代码的注释）
		多行注释	/* ... */
		
	条件语句
		if语句和switch
		当条件满足执行其后的语句
		三元运算符 ?:用于逻辑判断，条件为true为:前的值
	
	循环语句
		while、do-while、for
		while(expression){循环体}
		do{循环体}while(expression);
		for(初始化值;条件;递增表达式){循环体}
		for(;;){}、while(true)永真循环
		break语句和continue语句
			都具有跳转功能，前者是跳出循环结束循环，后者是跳出本次循环继续下一次循环

	数据类型
		js中每一个值都属于某一种类型。
		es6之前有6中，es5之后新增symbol
		数值(number)	整数和小数
		字符串(string)	单引号或双引号的文本
		布尔(boolean)	只有true和false
		undefined		未定义，暂时没有任何值
		null			表示无值
		对象(object)	各种值的集合
		typeof运算符，返回一个值的数据类型（typeof 变量）
			原始类型(数值|字符串|布尔)		分别返回number|string|boolean
			函数		返回function
			undefined	返回undefined
			其他情况	返回object
		null和undefined
			都表示没有
			if语句中自动转化为false
			null == undefined 为true
		布尔值
			undefined、null、false、0、NaN、""或''(空字符串)转化为布尔值false，其余都为true
	
	数值(js中所有数字都以64位浮点数形式存储)
		整数和浮点数		1 === 1.0  true
		数值精度绝对值小于2的53次方的整数都可以精确表示
		NaN是一个特殊值，表示非数字，一般是字符串解析成数字出错，NaN不等于任何值
		判断方法 isNaN() 只对数值有用，当为其他会先转换为数值
		parseInt()将在字符串转换为整数，如果头部包含空格会去除空格，如果包含非数字会将转换好的部分返回
		如果字符串第一个字符不能转换为数字(正负号后面跟着数字除外)则返回NaN
			
	字符串
		length属性		返回字符串的长度
		
	对象
		一种无序的数据集合，有若干个键值对(属性值)构成  var o = {p1: 'hello',p2: world',...};
		对象的声明方法三种：
			var o1 = {};
			var o2 = new Object();
			var 03 = Object.create(Object.prototype);
		对象的所有键名(属性)都是字符串，不加引号也可以
		读取属性有两种方法：点运算符(o.p)、方括号（o['p']）
		查看对象的所有属性 Object.keys();
		delete 删除对象的属性，成功返回true		(delete o.p)
		in	用于检查对象是否包含某个属性		('p' in o)

	数组
		数组是按次序排列的一组值。整个数组用[]
		var arr = ['a','b','c'];索引编号从0开始
		任何类型的数据都可以放入数组
		数组本质上属于一种特殊的对象 使用typeof 数组为object类型
		length属性	返回数组成员数量

	函数
		函数就是一段可以返回调用的代码块
		函数的声明：
			function 函数名(参数){函数体}
			变量赋值法	var fun = function(参数){函数体}
			Function 构造函数	var fun = new Function(参数1,参数2,...,'函数体')
		函数参数值如果为原始数据传递方式为值传递，其他数据类型是传址传递
		arguments对象包含了函数运行时的所有参数，只能在函数体内部使用
		闭包（不能滥用闭包，会造成网页性能问题）
			作用：可以读取函数内部的变量、让函数内部变量始终保持在内存中、封装对象的私有属性和私有方法
		
	运算符
		算术运算符：
			加法运算符（算术加法、字符串拼接）	+
			减法运算符	-
			乘法运算符	*
			除法运算符	/
			余数运算符	%
			自增/自减运算符  ++/--
		赋值运算符：
			+=、-=、*=、/+、%=、>>=、<<=、>>>、&=、|=、^=
		比较运算符：
			相等		==
			严格相等	===		对象比较是比较地址是否相等、NaN不与自身严格相等、undefined和null与自身严格相等
			不相等		!=
			严格不相等	!==
			小于		<
			大于		>
			小于等于	<=
			大于等于	>=
		布尔运算符：
			取反运算符	!		true->false false->true;非布尔值undefined、null、false、0、NaN、空串为true
			且运算符	&&		
			或运算符	||
			三元运算符	?:
		位运算符
			
	数据类型转换
		强制转换：主要用于Number、String、Boolean三个构造函数
			Number()
				原始类型值转换规则：空串转化为0、undefined转换为NaN、null转换为0
				对象的转换规则：参数为对象时返回NaN，除非单个数值的数组
			String()
				原始类型值转换规则：对应加上单/双引号
				对象那个的转换规则：对象转换为类型字符串、数组转换为数组字符串形式
			Boolean()
				undefined、null、false、0、NaN、空串转换为false，其余都为true
		自动转换

	错误处理机制
		Error对象	js解析或执行时出现错误，引擎会抛出一个错误对象	所有抛出的错误都是Error构造函数的实例
		message属性表示出错时的提示信息
		6个派生的对象：
			SyntaxError、ReferenceError、RangeError、TypeError、URIError、EvalError
		throw语句
			中断程序，抛出一个意外或错误	throw expression;
			js引擎一旦遇到throw语句，就会停止执行后面的语句
		try...catch
	
	标准库
		js原生提供了Object对象
		new Object() 与 o = {};等价
		Object()
			如果参数是原始值类型，则返回对应的包装对象；如果参数是一个对象，则返回原对象
			Object.keys()	遍历对象属性
			valueof()		返回一个对象的值
			toString()		返回一个对象的字符串形式
		
		Array是js的内置对象
			建议直接生成新数组		var arr = [value1,value2,...];
			Array.isArray()	判断一个值是否为数组
			push()			给数组末端添加一个或多个元素并返回新数组长度
			pop()			删除数组最后一个元素，并返回该元素
			join()			将数组元素组成字符串返回，默认逗号隔开，提供参数以参数隔开
			concat()		将多个数组合并，
			shift()			删除数组的第一个元素，并返回该元素
			unshift()		在数组首位添加元素，并返回新数组长度
			reverse()		将数组元素顺序颠倒，返回新数组
			forEach()		遍历数组
			filter()		参数是一个函数，所有数组成员依次执行，返回结果为true的成员组成新数组
			some()/every()	函数作为参数，返回布尔值，前者是元素中有一个为true，整个结果为true，后者相反
			...
		包装对象和Boolean对象
			包装对象是对数值、字符串、布尔相对应的Number,String,Boolean
			作为普通函数使用可将任意类型转换为对应原始类型的值
			作为构造函数可将原始类型转换为相对应的包装对象
			valueof()	返回包装类对应的原始类型值
			toString()	返回实例对应的字符串形式
			
		Number对象
			toFixed()		将一个数转换为指定位数小数，并返回小数对应的字符串
		
		String对象
			静态方法：
				fromCharCode()	unicode转换为对应字符串
			实例对象属性和方法
				length			返回字符串长度
				charAt()		返回指定位置字符，参数从0开始
				charCodeAt()	返回给定字符的Unicode码
				concat()		连接连个字符串，返回新串
				slice()			提取子字符串并返回,第一个参数是开始位置，第二个是结束位置
				substring()		原字符串取出子字符串并返回
				substr()		原字符串取出子字符串并返回,第一个参数是开始位置，第二个是字符串长度
				indexOf()
				match()			确定原数组是否匹配某个子字符串，返回一个数组
				search()
				replace()		用于替换匹配的子字符串。一般只替换第一个匹配
				split()			按照给定规则分割字符串，返回分隔的字符串数组
		
		Math对象
			属性和方法：
				Math.PI
				Math.abs()		绝对值
				Math.ceil()		向上取整
				Math.floor()	向下取整
				Math.pow()		指数运算
				Math.sqrt()		平方根
				Math.round()	四舍五入
				Math.random()	随机数
			
		Date对象
			日期和时间操作接口
			Date对象可作为普通函数调用，返回当前时间字符串（Date()有无参数都表示当前时间）
			作为构造函数使用new Date()无参数表示当前时间
			有参数：1.毫秒作为参数 2.日期字符串作为参数（year,month,day,h,m,s）
			Date对象方法
			Date.now()				返回当前距1970年1月1日00:00:00UTC毫秒数
			Date.parse()			解析日期字符串，返回毫秒数，日期字符串格式YYYY-MM-DDTHH:mm:sssZ
			Date.UTC()				参数（year,month,day,h,m,s）返回毫秒数
			toLocaleDateString()	返回当地日期
			toLocaleTimeString()	返回当地时间
			getTime()				获取时间毫秒数
			getFullYear()			返回四位数年份
			getMonth()				返回月份（0代表1月，11表示12月）
			getDate()				返回每月几号
			getDay()				返回星期（0为星期天1为星期一）
			getHours()				返回小时（0-23）
			getMinutes()			返回分钟（0-59）
			getSeconds()			返回秒（0-59）
		
		RegExp对象
			新建表达式两种方式：
				直接使用字面量	var reg = /xyz/  (以斜杠开始斜杠结束)
				RegExp构造函数	var reg = new RegExp("xyz");
				两种方式等价，还可在/xyz/i和构造函数添加第二个参数i,i是修饰符表示忽略大小写
			方法：
				test()		返回布尔值，用来验证字符串是否符合某个模式
				exec()		返回一个数组，里面是匹配结果
			匹配规则
				字面量字符
				元字符
					点字符(.)	匹配一个除回车(\r)、换行(\n)、行分隔(\u2028)、段分隔(\u2029)以外的所有字符
					位置字符	^表示字符串起首，$表示字符串行尾
					选择符(|)	表示或关系
				字符类（表示一系列字符，其中一个就可以，可供选择的字符放在[]之中）
					脱字符(^)	[^abc]	表示除了方括号内其他都可以匹配
					连字符(-)	[0-9],[a-z],[A-Z],[0-9a-zA-Z]
				重复类	{} {n}表示重复n次，{n,}表示至少重复n次，{n,m}表示至少重复n次，不多于m次
				转义字符	12个字符需要用\转义	^,.,[,$,(,),|,*,+,?,{,\
				修饰符
					g修饰符 表示全局匹配
					i修饰符 表示忽略大小写
					m修饰符 表示多行模式
				预定义模式
					\d		匹配0-9之间的数字[0-9]
					\D		匹配0-9以外的字符[^0-9]
					\w		匹配任意字母、数字、下划线[0-9a-zA-Z_]
					\W		匹配所有字母、数字、下划线以外的字符[^0-9a-zA-Z_]
					\s		匹配空格
					\S		匹配非空格
					
		JSON对象
			JSON格式:
				JSON是一种用于数据交换的文本格式，目的是取代繁琐笨重的XML
				数组或对象的每个值可以是简单值也可以是复合值
				简单值：数值(十进制)、字符串、布尔、null(undefined,NaN,Infinity,-Infinity都会转换为null)
				复合值：符合JSON格式的对象和数组
				数组或对象之中的字符串必须用双引号，对象成员名称也必须用双引号
			JSON数据处理：
				JSON.stringify()	将一个值转换为JSON类型字符串
				正则对象会被转换成空对象，会忽略对象的不可遍历属性
				JSON.parse()		将JSON字符串解析为对象
			
		类型化数组
			是js操作二进制数据的一个接口
			是建立在ArrayBuffer对象的基础上，作用是分配一段可以存放数据的连续内存区域
			var buffer = new ArrayBuffer(32);
			byteLength属性返回内存区域长度
			slice()		允许将内存区域的一部分，拷贝到一个新的类型化数组对象
			两个参数，第一个表示拷贝开始序号，第二个表示拷贝截止序号
			视图：
				
				
				
		面向对象编程（OOP）
			核心思想：将现实世界各种复杂的关系，抽象为一个个对象，然后有对象之间的分工与合作，完成对现实世界的模拟
			对象	万物皆对象
			构造函数
				构造函数与普通函数类似，但最大特点是函数体内部使用了this关键字，代表所要生成对象的实例
			生成对象使用new关键字，执行构造函数返回一个实例对象
			instanceof用来确定某个对象是否为某个构造函数的实例
			this关键字(动态切换)
				1.全局环境		this指的是顶层对象window
				2.构造函数		this指的是当前实例对象
				3.对象方法		this会改变指向
				4.Node.js		全局环境中this指向gloabl，模块环境中this指向module.exports
			提供call,apply,bind三个方法来切换/固定this的指向
			call方法：可指定该函数内部this的指向  func.call(thisValue,arg1,arg2,...) 
			第一个参数是this所指向的对象，过后参数为函数调用的参数
			apply与call方法功能类似，区别在于使用上 func.apply(thisValue.[arg1,arg2])
			第一个参数是this所指向的对象，过后参数为一个数组作为参数
			应用：1.找出最大元素 2.将数组空元素变为undefined 3.转换类似数组的对象 4.绑定回调函数对象
			bind方法：将函数体内的的this绑定到某个对象，然后再返回一个新函数，
			func.bind(thisValue, arg1,arg2,...) 除了绑定this以外，还绑定了原函数的参数
			
			封装
				同一个构造函数的对象实例之间不能共享属性
				prototype属性将定义在他上面的属性和方法，能被所有实例共享
				constructor属性		prototype对象有一个属性constructor默认指向prototype对象的所有构造函数
				Object.getPrototypeOf()		返回一个对象的原型
				Object.create()				生成新的对象，可替代new，接受一个原型对象作为参数，返回新对象
				isPrototypeOf()				判断一个对象是否是另一个对象的原型
			
			继承
				构造函数的继承分为两部分：
					子类调用父类的构造函数、子类原型指向父类原型
				获取对象的原型：
					_proto_属性、constructor.prototype、Object.getPrototypeOf()参数是实例对象
				属性的继承分为两部分：
					对象自身的原生属性、继承自原型的继承属性
				hasOwnProperty()	判断对象自身是否具有某个属性
				对象的拷贝:
					确保拷贝后的对象与原对象具有相同的prototype原型对象
					确保拷贝后的对象与原对象具有相同的属性 
					
		DOM（文档对象模型）
			基本思想就是把结构化文档(HTML和XML)解析成一系列节点，再由这些节点组成一个树状结构，所有的节点和最终树状结构都有规范的对外接口，达到使用编程语言操作文档的目的，DOM可以理解为文档的编程接口
			Node节点：
				DOM的最小组成单位
				对于HTML文档来讲，节点有以下六种类型：
					Document节点		文档节点，表示整个文档
					DocumentType		文档类型节点，表示文档类型
					Element节点			元素节点，表示HTML元素
					Attribute节点		属性节点，表示HTML元素的属性
					Text节点			文本节点，表示HTML文档中出现的文本
					DocumentFragment	文档碎片节点，表示文档片段
				Node节点属性：
					nodeName			返回节点的名称
					nodeType			返回节点的常数值
					ownerDocument		返回当前节点的顶层文档对象即document对象
					
					nextSibling			返回当前节点后面的第一个同级节点，没有为null
					previousSibling		返回当前节点前最近的同级节点，没有为null
					parentNode			返回当前节点的父节点
					parentElement		返回当前节点的父Element节点
					
					textContent			返回当前节点和他的所有后代节点的文本内容
					nodeValue			返回或设置当前节点的值，格式为字符串（一般只用于Text节点）
					
					childNodes			返回一个NodeList集合，成员包括当前节点的所有子节点
					firstNode			返回当前节点的第一个子节点
					lastNode			返回当前节点的最后一个子节点
					
					baseURI				返回一个字符串，该字符串表示当前网页的绝对路径
				Node节点方法：
					appendChild()		接受一个节点对象作为参数，插入到当前节点子节点后
					hasChildNodes()		返回一个布尔值，表示当前节点是否有子节点
					
					cloneNode()			用于克隆一个节点，接受布尔参数表示是否克隆子节点
					insertBefore()		第一个参数为新节点，第二个为当前节点的子节点，表示新节点插入子节点前
					removeChild()		接受一个子节点作为参数，表示从当前节点移除该节点，返回被移除的节点
					replaceChild()		接受两个参数，将一个新节点替换当前节点的一个子节点
					
				NodeList接口，HTMLCollection接口
					ES6新增for ... of循环遍历NodeList接口对象
					item方法接受数字索引参数，返回NodeList接口对象中索引对应的成员
				ParentNode接口，ChildNode接口
					ParentNode接口用于获取当前节点的Element子节点
					Element、Document、DocumentFragment三类节点部署了ParentNode接口
					children			返回一个动态的HTMLCollection集合
					firstElementChild	返回当前节点的第一个Element子节点
					lastElementChild	返回当前节点的最后一个Element子节点
					childElementCount	返回当前节点的所有Element子节点的数目
					ChildNode接口用于处理子节点
					Element节点、DocumentType节点、CharacterData接口三类部署了ChildNode接口
					remove()			移除当前节点本身
					before()			当前节点前插入同级节点
					after()				当前节点后插入同级节点
					replaceWith()		使用参数指定节点替换当前节点
				
				html元素
					网页的根元素(document.documentElement)
					clientWidth/clientHeight   视口宽高（不包括滚动条宽高）
					offsetWidth/offsetHeight   网页总宽高
					dataset属性用于操作HTML标签元素的data-*属性 获取dataset.*
					offsetParent/offsetTop/offsetLeft
					Element对象的方法：
					选取子元素
						querySelector(),querySelectorAll(),getElementsByTagName(),getElementsByClassName()
					getAttribute(),setAttribute(),removeAttribute()
			
			docuemnt节点：
				文档的根节点(window.document)
				获取：
					正常网页，使用document或者window.document
					iframe载入的网页，使用iframe节点的contentDocument属性
					Ajax操作返回的文档，使用XMLHttpRequest对象的responseXML属性
					某个节点包含的文档，使用该节点的ownerDocument属性
				属性：
					doctype				包含当前文档类型（doctype）
					documentElement		表示当前文档根节点，通常是document节点的第二个子节点（html）
					defaultView			在浏览器中返回document对象所在的window对象
					body				返回当前文档的body节点
					head				返回当前文档的head节点
					activElement		返回当前文档中获得焦点的那个元素
					
					domain				获取当前文档的域名
					location			返回当前文档的URL信息
						location.href	将location对象转为字符串
						location.search	URL中?及以后的内容
						location.assign()跳转到另一个网页
						location.reload(true/false)优先从服务器/本地缓存重新加载
					document.location与window.location等价
					
					readyState			文档状态
					compatMode			浏览器处理文档的模式，BackCompat(向后兼容模式),CSS1Compat(严格模式)
					
					forms				返回页面中的所有表单
					images				获取页面所有图片元素
					
					cookie				返回当前网页的cookie
				方法：
					open()				新建一个文档,供wite()写入新内容
					write()				向当前文档写入内容
					close()				关闭open()新建的文档
					
					querySelector()				返回匹配指定的css选择器的元素节点
					getElementsById()			返回指定id属性的元素节点(比querySelector效率高)
					querySelectorAll()			返回匹配指定的css选择器的所有节点
					getElementsByClassName()	
					getElementsByTagName()
					getElementsByName()			返回拥有name属性的html元素
					
					createElement()				生成HTML元素节点
					createTextNode()			生成文本节点参数为文本内容
					createAttribute()			生成新的属性对象节点，参数为属性名
					createEvent()				生成事件对象，参数为事件类型
			
			Element节点：
				attributes					获取当前元素节点的所有属性
				innerHTML				返回该元素包含的HTML代码,如果插入的是文本，最好使用textContent
				outerHTML				返回包含节点自身和包含的所有子元素
				getAttribute()
				setAttribute(x,y)
				removeAttribute()
			
			Text节点与DocumentFragment节点
				Text节点属性：
					data			用来设置或读取Text节点内容
				
			Event对象：
				EventTarget接口（DOM的事件操作都定义在该接口）
				Elementt节点、document节点、window对象都部署了该接口
				方法：
					addEventListener()		用于在当前节点或对象上定义一个特定事件的监听函数
					三个参数：
						第一个参数是事件名称，大小写不敏感
						第二个参数是要监听函数，指定事件发生时，会调用该函数,如需传参可使用匿名函数
						第三个参数是布尔值，监听函数是否在捕获期间触发(false默认值监听函数只在冒泡阶段触发)
					removeEventListener()	用来移除addEventListener方法添加的事件监听函数
					dispatchEvent()			在当前节点触发指定事件，从而触发监听函数的执行
				DOM提供三种方法用来为事件绑定监听函数
					1.HTML标签的on-属性,直接定义某些事件的监听代码 ，如onload,onclick,...
					此种方法监听代码后的属性值使用的方法名后面要带上圆括号(违反HTML与js代码分离原则)
					2.Element节点的事件属性，如 window.onload = doSomething;div.onclick=function(){}
					3.addEventListener方法，可针对同一事件，添加多个监听函数，可指定阶段触发(推荐)
				
				事件的传播：(三个阶段)
					当一个事件发生后，会在不同的节点进行传播
					第一阶段，从window节点传导到目标节点，称为"捕获阶段"
					第二阶段，在目标节点上触发，称为"目标阶段"
					第三阶段，从目标节点传导回window对象，称为"冒泡阶段"
					外层 ————> 内层 ————> 外层
					
					事件代理：
						事件会在冒泡阶段向上传播到父节点，可把子节点监听函数定义到父节点上，由父节点的监听函数统一处理多个子元素的事件，这种方法称为事件代理
						如果希望事件到某个节点未知不在传播，可使用事件对象的stopPropagation方法(不影响该节点其他相同事件的监听函数)，如需都不再触发，可使用stopImmediatePropagaction方法
				
				Event对象：
					Event构造函数接受两个参数
					第一个参数是字符串，表示事件的名称
					第二个参数是一个对象，表示事件对象的配置，有两个属性bubbles，cancelable
						布尔值，默认都为false，前者表示是否冒泡，后者表示是否可取消
					Event属性：
						bubbles				返回布尔值，表示当前事件是否冒泡，默认不冒泡
						eventPhase			返回整数，表示时间目前所处的节点
							0表示没有发生,1捕获阶段,2目标节点,3冒泡阶段
						cancelable			返回布尔值，表示事件是否可以取消，默认不可取消
						defaultPrevented	返回布尔值，表示该事件是否调用过preventDefault方法
						currentTarget		返回事件当前节点，在监听函数中该属性实际上等同于thia
						target				
						type				返回字符串，表示事件类型，大小写不敏感
						detail				返回数值，表示某种信息
						timeStamp			返回毫秒时间戳，表示事件发生时间
						isTrusted			返回布尔值，表示该事件是否可信任
						
					Event方法：
						preventDefault()	取消浏览器对当前事件的默认行为，生效前提事件cancelable属性为true
						stopPropagation()	阻止事件传播
						stopImmediatePropagation()阻止同一事件的其他监听函数被调用
					
					鼠标事件：(与鼠标相关的相关事件)
						click事件，当用户在Element节点、document节点、window对象上点击鼠标(或按下回车)时触发
						dbclick事件，当用户在Element节点、document节点、window对象上双击击鼠标时触发
						mouseup/mousedown事件，释放/按下鼠标键触发
						mousemove事件，鼠标在一个节点内部移动时触发
						mouseover/mouseenter事件，鼠标进入一个节点触发，前者会冒泡从而触发父节点，后者不会
						mouseout/mouseleave事件，鼠标离开一个节点触发，前者灰毛泡，后者不会
						contextmenu事件，在一个节点点击鼠标右键时触发，或者按上下文菜单时触发
						
						MouseEvent对象：
							MouseEvent构造函数包含两个参数，第一个是事件名称，第二个是事件初始化对象
							属性：
							altKey/ctrlKey/metaKey/shiftKey		alt/ctrl/windows/shift键(默认false,是否按下)
							button		返回一个数值，表示按下哪个键(-1没有按键0按下主键1按下中建2按下次键)
							buttons		返回一个三个比特位的值（1，2，4表示左中右001，010，100）
							clientX		返回鼠标位置相对浏览器x坐标
							clientY		返回鼠标位置相对浏览器y坐标
							screenX		返回鼠标相对于屏幕x坐标
							screenY		返回鼠标相对于屏幕Y坐标
					
					键盘事件：(描述键盘行为)
						keydown		按下键盘时触发
						keypress	只要按下的键并非ctrl、alt、shift、meta，就触发事件
						keyup		松开键盘时触发事件
				
			CSS操作：
				操作Element节点CSS样式最简单的方法是就是用节点对象的getAttribute(),setAttribute(),removeAttribute()，读写或者删除HTML的style属性
				Element节点本身提供了style属性，style属性指向一个对象，来读写页面元素的行内CSS样式
				与css规则相对应，只是属性名将横杠从css中移除将横杠后的第一个字母大写，如果属性名是js保留字，需在前加上css，并且属性值都是字符串也包括单位 style.backgroundColor = '';
				cssText属性，style对象的cssText属性用来读写或删除整个style属性 style.cssText='';
				
				CSS模块的侦测
					需要知道当前浏览器是否支持某个模块
					比较普遍的方法,判断某个DOM元素的style对象的属性名是否为字符串：
					typeof	element.style.propertyName === 'string';
					
				setPropertyValue(),getPropertyValue(),removeProperty()
				setPropertyValue(propertyName，value)		设置某个css属性
				getPropertyValue(propertyName)				读取某个css属性
				removeProperty(propertyName)				删除某个css属性
				
				CSS伪元素：
					js获取伪元素的样式，使用window对象的getComputedStyle方法 如window.getComputedStyle(DOM节点,'伪类').属性
					
				StyleSheet对象：
					stylesheet代表网页的一张样式表，包括link节点加载的样式表和style节点的内嵌样式表
					document.styleSheets返回当前页面的所有StyleSheet对象
					link节点和style节点的sheet属性也可获取StyleSheet对象
					
					属性：
						media			表示这个样式表适用于screen，还是print还是all，默认screen
						disabled		用于打开或关闭一张样式表
						href			返回StyleSheet对象连接的样式地址，内嵌的style节点，属性为null
						title
						type			type值，一般为text/css
						parentStyleSheet
						ownerNode
						cssRules		类似数组。每个成员都是样式表的一条css规则
					方法：
						insertRule()	在当前样式表的cssRules对象插入css规则
						deleteRule()	删除cssRules对象的css规则
					添加样式表
						添加内置样式表；添加外部样式表
				CSS规则：
					CSS规则包括两部分：CSS选择器和样式声明
					CSSRule接口：
						属性：
							cssText			返回当前规则文本
							parentStyleSheet
							parentRule
							type			返回一个整数值，表示当前规则类型，
								1：样式规则，部署了CSSStyleRule接口
								3：输入规则，部署了CSSImportRule接口
								4：Media规则，部署了CSSMediaRule接口
								5：字体规则，部署了CSSFontFaceRule接口
					
		浏览器对象
			浏览器的JavaScript引擎：
				网页嵌入js代码的方法：
					1.直接添加代码，通过script标签
					2.加载外部脚本，<script src=''></script>
						如果脚本文件使用了非英文字符，应注明编码charset='utf-8'
						正常网页加载流程：
							1.浏览器一边加载HTML网页，一边开始解析
							2.解析过程中，发现script标签
							3.暂停解析，下载时script标签中的外部脚本
							4.下载完成，执行脚本
							5.恢复继续解析HTML网页
						为了避免script标签加载时间过长形成阻塞效应，一般将script标签放在页面底部，而不是头部，如果是比较重要的脚本代码，一定要放在头部的话，最好直接将代码其纳入页面，缩短加载时间
						另一个好处是在DOM结构生成之前调用DOM或出错，放在尾部，就解决了这个问题
						对于同一域名的资源，如脚本文件、样式表文件、图片文件等浏览器一般最多同时下六个，如果不同域名的资源，就没有这个限制。通常把静态文件放在不同域名之下，以加快下载速度
						解决脚本文件下载阻塞网页渲染的问题
							1.加入defer属性(老版本的ie，且脚本之间有依赖关系不建议使用)
								defer属性运行：
									1.浏览器开始解析HTML网页
									2.解析过程中，发现带有defer属性的script标签
									3.浏览器继续往下解析HTML网页，同时并行下载script标签中的外部脚本
									4.浏览器完成解析HTML网页，此时再执行下载脚本
							2.加入async属性(不保证脚本执行顺序，不能使用document.write方法，低于ie10不支持)
								async属性运行：
									1.浏览器开始解析HTML网页
									2.解析过程中，发现带有async属性的script标签
									3.浏览器继续往下解析HTML网页，同时并行下载script标签中的外部脚本
									4.脚本下载完成，浏览器暂停解析HTML网页，开始执行下载的脚本
									5.脚本执行完毕，继续解析HTML网页
							除了静态的script标签，还有动态嵌入script标签
							如果不指定协议，浏览器默认使用HTTP协议
							
				早期浏览器内部对js出路过程：
					1.读取代码，进行词法分析，将代码分解成词元
					2.对词元进行语法分析，将代码整理成"语法树"
					3.使用"翻译器"，将代码转为字节码
					4.使用"字节码解释器"，将字节码转为机器码
				由于逐行解释将字节码转为机器码，效率很低，为提高运行速度，现代浏览器采用"即时编译"(JIT)，即字节码只在运行时编译，用到哪一行编译哪一行，并且把编译结果缓存(不同浏览器编译策略不一样)
				字节码运行在一个虚拟机上也成为JavaScript引擎
				常用JavaScript引擎：Chakra(微软),Nitro/JavaScript Core(Safari),Carakan(Opera),SpiderMonkey(火狐),V8(谷歌)
				
			定时器：
				js定时执行代码的功能主要由setTimeout()和setInterval()完成
				setTimeout(func|code, delay)	指定某个函数或某段代码，在多少毫秒后执行，返回整数，可用此来取消定时器
					第一个参数是将要延迟执行的函数(名)或者代码片段，第二个参数是毫秒数
					如果推迟执行的回调函数是某个对象的方法，那么该方法的this关键字降至向全局环境
				setInterval()	与setTimeout用法一致，只是setInterval会在指定间隔时间循环执行
				clearTimeout()、clearInterval()	分别将setTimeout()、setInterval()返回的整数值作为参数取消定时器
				
			window对象：
				在浏览器中，所有对象的顶层对象就是window对象，浏览器环境的全局变量是window对象的属性
				属性：
					name	用于设置当前浏览器窗口的名称
				Navigator对象
					属性：
						Navigator.userAgent			用来标识浏览器种类(no)
						识别所有移动设备的浏览器	/mobi|android|touch|mini/i
						Navigator.plugins			返回类似数组，成员包括浏览器安装插件
				screen对象
					属性：screen.height|screen.width		显示设备高度/宽度（分辨率）
				
				window对象方法：
					URL的编码和解码方法
						decodeURI()			解码
						decodeURIComponent()
						encodeURI()			编码
						encodeURIComponent()
					getComputedStyle()		接受HTML元素作为参数，返回该元素样式信息对象
				window对象事件：
					onerror		浏览器脚本发生错误时触发
						error事件回调函数参数：
							message(出错信息),filename(出错脚本网址),lineno(行号),colno(列号),error(出错对象)
						三类事件会出现error事件：js语法错误、js脚本文件不存在、图像文件不存在
						两类事件不会触发error事件：CSS文件不存在、iframe文件不存在
				方法：
					alert()		弹出对话框，只有一个确定
					prompt()	弹出对话框，含输入框，确定/取消按钮，返回值为字符串或者null
						第一个参数可在输入框上方显示该文本内容，第二个参数可选，为输入框默认值
						当输入框输入内容，点击确定，prompt方法返回该内容；
						当没有输入任何内容，点击确定prompt方法返回默认值；
						当直接点击取消按钮，返回null
					confirm()	弹出对话框，含提示信息和确定取消按钮，点击确定返回true，取消返回false
					三个方法为浏览器统一规定样式，无法定制
						
			history对象：
				history对象用来保存浏览历史
				length属性		表示访问的地址个数
				back()			返回到上一个页面，等同于浏览器后退键
				forword()		返回到下一个页面，等同于浏览器前进键
				go()			接受一个整数作为参数，移动到该数的页面
					go(1)相当于forword(),go(-1)相当于back(),go(0)相当于刷新页面
				pushState()		
				replaceState()
				state	
				
				popstate事件：
			
			Ajax：(异步的js和xml)
				是指不刷新整个页面，向服务器发送请求数据，达到局部刷新的目的
				XMLHttpRquest对象：（用于从js发出HTTP请求）
					常用方法：
						//新建一个XMLHttpRequest实例对象
						var xhr = new XMLHttpRequest();
						//指定通信过程中状态改变是的回调函数
						xhr.onreadystatechange = function(){
							//通信成功时，状态值为4
							if(xhr.readyState === 4){
								if(xhr.status === 200){
									//处理处理服务器发送过来的数据
								}else{
									//处理错误
								}
							}
						};
						//
						xhr.open('GET','/enpoint',true);
						//发送HTTP请求
						xhr.send(null);
						
					open()		用于指定发送HTTP请求的参数
						发送方式：一般为"GET","POST","PUT","DELETE"
						请求地址：
						是否异步：true表示异步，false表示同步
					setRequestHeader()	用于设置HTTP请求头信息
					send()		用于实际发出HTTP请求
						不带参数，表示HTTP请求只包含请求头信息(如GET请求)
						带参数，表示除请求头信息，还包含具体数据
					readyState		通信过程中，状态变化时readState值就会变化，该值每次变化都会触发readyStateChange事件
					
					服务器返回的信息：
						status			表示返回的HTTP状态码，一般来说，通信成功状态码为200
						responseText	表示服务器返回的文本数据
					
					setRequestHeader()	用于设置HTTP请求头信息
					overrideMimeType()	用于指定服务器返回数据的MIME类型
					
					responseType		指定服务器返回数据类型，常用值，'text','arraybuffer','blod','document','json'
					
					文件上传
						通常使用file控件实现文件上传
							file控件设置multiple属性可实现一次选择多个文件
							file对象的files属性返回FileList对象，包含了用户选中的文件
							新建FormData实例将表单数据添加到该对象，实现文件上传
							formData.append(name,file,filename);//Files
							formData.append(name,blod,filename);//Blods
							foemData.append(name,value);//Strings
						除了使用FormData接口上传，还可用File API上传
							获取FileList对象，设置请求头文本类型为该文件类型
					
					JSONP
						常用于服务器与客户端之间的数据传输，主要为了避免浏览器的同域限制(只支持GET请求)
						因为Ajax只能向当前网页所在的域名发出HTTP请求，JSONP就是采用在网页中动态的插入script元素的做法，向服务器请求脚本文件
						
					CORS(跨域资源共享)
						允许js代码向另一域名发出XMLHttpRequest请求，克服Ajax只能在同一域名下使用的限制
						ie8,ie9该方法不是部署在XMLHttpRequest对象，而是XMLDomainRequest对象
						检查浏览器是否支持CORS部署在XMLHttpRequest对象上
							if("withCredentials" in request){
								//跨域请求
							}
						原理：增加一条头HTTP信息查询访问服务器端，当前请求域名是否在许可名单之中，以及可使用那些HTTP动词，得到肯定答复即可发出XMLHttpRequest请求，这种机制叫做"预检"
						预检专用HTTP请求头信息是Origin，服务器端同意跨域请求，返回Access-Control-Allow-Origin头信息
					
					Fetch API
						是一种新规范用来取代XMLHttpRequest对象，两个特点：
							一是简化接口，将API分散在几个不同的对象上，二是返回Promise对象，避免了嵌套的回调函数
						检查浏览器是否部署了该API：
							if(fetch in window){
								//支持
							}else{
								//不支持
							}
						fetch()		第一个参数可以是URL字符串，也可是Request对象实例，返回Promise对象，并将response对象传给回调函数
						response对象：
							response.json()			转换为json格式
							response.type			表示响应的类型，basic正常同域请求，cors跨域请求，opaque非cors跨域请求
						需要在CORS机制下进行跨域请求，需指明状态，fetch方法第二个参数使用{mode: 'cors'}
						
						Headers对象：
							用来构造/读取HTTP数据包的头信息
							fetch方法第二个参数{headers：xxx}
						Request对象：
							构造HTTP请求
							第一个参数URL。
							第二个参数表示配置对象{method：xxx,header: xxx,body: xxx}
							第三个参数cache:'reload',表示不能缓存response
							mode属性用来设置是否跨域：same-origin,no-cors(默认值),cors
						Response对象：
							status						整数值，表示状态码，如200
							statusText					字符串，表示状态信息，默认"OK"
							ok							布尔值，表示状态码是否在200~299范围内
							headers						Headers对象，表示HTTP响应的头信息
							url							字符串，表示HTTP请求的网址
							type						字符串，basic,cors,default,error,opaque
							Response.error()			返回type属性为error的Response实例
							Response.redirect(url,status)返回的Response对象实例会重定向到另一个URL
							
						body属性	表示请求的内容
							可能的数据类型：ArrayBuffer,ArrayBufferView,Blod/File,string,URLSearchParams,FormData
						Request对象和Response对象提供了读取body方法：
							arrayBuffer(),blod(),json(),text().formData()这些方法只能使用一次，读取一次body
							bodyUsed属性表示body是否被读取
							
			同域限制和window.postMessage方法
				同域限制：出于安全考虑，浏览器只允许脚本与同样协议、同样端口、同样域名的地址进行通信
				
				window.postMessage方法用来在某种程度上，绕过同域限制，实现不同域名的窗口(包括iframe)之间的通信
					targetWindow.postMessage(message, targetURL[, transferObject]);
					targetWindow指的是目标窗口的变量
					message指要发送的信息
					targetURL是指定目标窗口的网址，不符合该网址不发送信息
					transferObject是跟随信息一起发送的Transferable对象
			
			Web Storage
				Web Storage 使网页可以在浏览器端存储数据
				该API分为两类:
					sessionStorage 保存的数据用于浏览器的一次会话，会话结束(窗口关闭)，数据清空
					loaclStorage   保存的数据长期存在，下一次访问该网站可直接读取以前保存的数据
				通过window对象是否包含sessionStorage和localStorage属性检查浏览器是否支持相应对象
				
				存入/读取数据
					sessionStorage和localStorage保存数据都是以键值对的方式存储，所有数据都是文本格式
					setItem方法存入数据		setIten('key','value');
					getItem方法读取数据		getItem('key');
					removeItem方法用于清楚某个键名对应的值	removeItem('key');
					clear方法用于清楚所有保存的数据		clear();
					利用length和key属性遍历所有键
				
				storage事件
					当存储的数据发生变化时，会触发storage事件。可指定该事件的回调函数
					window.addEventListener('storage',onStorageChange);
					function onStorageChange(e){e.key|e.oldValue|e.newValue}
			
			IndexedDB	浏览器端数据库
				可被网页脚本程序船舰和操作，允许存储大量数据，提供查找接口，建立索引，接近NoSql数据库
				具有以下特点：
					(1)键值对方式存储。内部采用对象仓库存放数据，所有类型可直接存入，
					(2)异步。防止大量数据读写，降低浏览器性能
					(3)支持事务。只要一步失败整个事务取消，回到事务发生之前状态
					(4)同域限制。网页只能访问同一域名下的数据库
					(5)存储空间大。一百不少于250MB
					(6)支持二进制存储。不仅支持字符串，还支持二进制
					检查浏览器是否支持IndexedDB
					if('IndexedDB' in window){
						//支持
					}else{
						//不支持
					}
				indexedDB.open方法
					浏览器原生提供indexedDB对象，indexedDB.open方法用于打开数据库。
					var openRequest = indexedDB.open('test', 1);
					第一个参数表示打开的数据库名，字符串表示，不可省略。第二个参数是数据库版本，大于0的整数
					打开数据库会触发4中事件：
						success			打开成功
						error			打开失败
						upgradeneeded	第一次打开数据库，或者数据库版本发生变化
						blocked			上一次数据库连接还未关闭
						第一次打开数据库时会先触发upgradeneeded事件，再触发success事件
					indexedDB实例对象方法：
						 createObjectStorage('storageName')		创建对象仓库存放数据
			
			
			Web Notifications API
				是浏览器的通知接口，用于在用户桌面(不是网页)显示通知信息，电脑和手机都适用
				检查浏览器是否支持
				if(window.Notification){
					//支持
				}else{
					//不支持
				}
				Notification.permission		用于读取用户给予的权限
					三种状态：
						default			不会有通知
						granted			用户明确同意接受
						denied			不用拒绝接收通知
				Notification.requestPermission()	用于让用户做出选择是否接收通知
				参数为一个回调函数，回调函数参数为用户授权状态
				Notification.requestPermission(function(status){})
				Notification实例对象：
					new Notification(title,options);
					参数title为通知的字符串标题
					参数options为一个对象设置各种属性(可选)
						{dir(文字方向),lang(en-US|zh-CN),body(字符串通知内容),tag(字符串通知id),icon(图标URL)}
					实例对象事件：
						show	通知显示给用户时触发
						click	用户点击通知时触发
						close	用户关闭通知时触发
						error	通知出错时触发
					
			移动设备 API
				Viewport：指网页显示区域，用户可见网页部分大小，也称为视口
					缩放规则，需要在HTML网页的head部分指定
					<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=no">
					viewport属性：
						width			viewport宽度，数值|device-width
						height			viewport高度
						initial-scale	初始缩放比例
						maximum-sacle	最大缩放比例
						minimum-scale	最小缩放比例
						user-scalable	是否允许用户缩放，no|yes
				
				Geolocation API：用于获取用户的地理位置，使用方法基于GPS或者其他机制（比如IP地址，wifi热点，手机基站）
					getCurrentPosition		获取用户的地理位置
					navigator.geolocation.getCurrentPosition(geoSuccess,geoError);
					同意授权：
						会调用geoSuccess函数	function geoSuccess(event){}
							event有两个属性	timestamp	返回获得位置信息的具体时间;coords	只一个对象，包含用户位置信息
							有以下值：
							latitude(纬度),longitude(经度),accuracy(精度),altitude(海拔),heading(360度方向),speed(每秒速度，单位米)，alitudeAccuracy(海拔精度)
					拒绝授权：
						会调用geoError函数		function geoError(event){}
							event有两个属性	message		返回错误信息;code	错误类型,0未知错误1用户拒绝授权2无法定位3超时
					设置定位行为：
							
		
				
				
				
					
					