Node.js是一个事件驱动、非阻塞I/O模型
Node.js是基于Chrome V8引擎的JavaScript运行环境
Node.js应用程序运行于单个进程中，不需为每个请求创建新线程


Node.js组成部分：
    1.引入required模块：使用require指令来载入Node.js模块
    2.创建服务器：服务器可以监听客户端请求，类似于Apache、Nginx等HTTP服务器
    3.接受请求与响应请求：服务器很容易创建，客户端可以使用浏览器或终端发送HTTP请求，服务器接收请求后返回响应数据

模块/包与CommonJS
    node.js模块：1.内置Node.js模块 2.第三方Node.js模块 3.自定义Node.js模块

创建Node.js应用
    一、引入required模块
        var http = require("http");
    二、创建服务器
        使用http.createServer()方法创建服务器，并使用listen方法绑定8888端口。
        函数通过request，response参数接收和响应数据
        //1.引入required模块
        var http = require("http");

        http.createServer(function (request,response){
            //2.发送HTTP头部
                //HTTP状态值：200 ok
                //内容类型：text/plain
            response.writeHead(200, {'Content-Type': 'text/plain'});
            //3.发送响应数据
            response.end('Hello World\n');
        }).listen(8888);

        //4.终端打印
        console.log('Server running at http://127.0.0.1:8888/');
    
NPM是随同Node.js一起安装的包管理工具，能解决nodejs代码部署上很多问题，
    允许用户从NPM服务器下载别人编写的第三方包到本地使用
    允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用
    允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用

    使用npm命令
    安装模块 - npm install <Module Name>
            如安装express模块：npm install express
            默认是本地安装，可在命令行后加入 -g 实现全局安装
            每个模块包下都有一个Package.json文件
            属性说明：
                name - 包名
                version - 包的版本号
                description - 包的描述
                homepage - 包的官方网站url
                author - 包的作者
                contributors - 包的贡献者姓名
                dependencies - 依赖包列表
                repository - 包代码存放的地方的类型，git/svn
                main - main字段指定了程序的主入口文件，默认模块目录下的index.js
                keywords - 关键字
    卸载模块 - npm uninstall express [-g]
    更新模块 - npm update <Module Name>
    搜索模块 - npm search <Module Name>
    创建模块 - npm init [-g]

REPL（交互式解释器）
    一个电脑环境，类似windows的终端，node自带交互式解释器，可以很好的调试js代码，并可执行以下任务：
        读取 - 读取用户输入，解析输入了js数据结构并存储在内存中
        执行 - 执行输入的数据结构
        打印 - 输出结果
        循环 - 循环操作以上步骤直到用户两次按下ctrl+c按钮退出
    启动node终端 输入 node 出现 >
    简单表达式运算 +、-、*、/
    使用变量：使用var关键字声明变量并将数据存储在变量中，没有使用var声明的变量会直接打印
    多行表达式：node会自动检测是否为连续的表达式
    下划线变量：下划线获取上一个表达式的结果

    global. + tab键 - 可查看访问的全局变量

    命令
        ctrl + c  -  一次退出当前终端，两次退出node repl
        ctrl + d  =  退出node repl
        tab       -  列出历史命令
        .help     -  列出使用命令
        .editor   -  启动编辑器模式
        .break    -  退出多行表达式
        .clear    -  退出多行表达式
        .save filename - 保存当前node repl会话到指定文件
        .load filename - 载入当前node repl会话的文件内容

回调函数
    node.js异步编程的直接体现就是回调函数，异步编程依托于回调函数
    回调函数一般作为最后一个参数出现
    function foo(value, callback(err, data)){}

事件循环
    node.js是单线程单进程应用程序，由于V8引擎提供异步执行回调接口，通过这些接口可以处理大量的并发，性能非常高
    基本所有的事件机制都是观察者模式实现
    事件驱动程序
        事件驱动模型，当webserver接收到请求，就关闭然后进行处理，然后去服务下一个web请求，请求完成，被放回处理队列，
        当到队列开头，结果返回给用户,webserver一直接收请求不等待任何读写操作，称之为非阻塞式IO或事件驱动IO

EventEmitter
    产生事件的对象都是events.EventEmitter的实例
    events模块提供了一个对象，events.EventEmitter
    EventEmitter的核心就是事件触发与事件监听器功能的封装
    引入events模块 - var events = require("events");
    events模块只提供了一个EventEmitter对象
    创建eventEmitter对象 - var eventEmitter =  new events.EventEmitter();

    addListener(eventname, listenercallback) - 为指定事件添加一个监听器到监听数组的尾部
    on(eventname, listenercallback) - 为指定事件注册一个监听器，接收一个字符串事件名，和回调函数
    once(eventname, listenercallback) - 为指定事件注册一个单次监听器，触发一次后结束该监听器
    removeListener(eventname, listenercallback) - 移除指定事件的某个监听器，必须为已经注册过的监听器
    removeAllListeners([eventname]) - 移除所有监听器，[eventname]为指定事件监听器
    setMaxListeners(n) - 设置监听器最大数量，默认10个
    listeners(eventname) - 返回指定事件的监听器数组
    emit(eventname, [value1], [value2],...) - 触发事件,可带参数

    类方法 - EventEmitter.emitter.listenerCount(eventname) 返回指定事件的监听器数量
    error事件,遇到 异常的时候通常会触发 error 事件

Buffer
    js自身只有字符串数据类型，没有二进制数据类型
    但在处理TCP流或文件流必须使用二进制，Buffer用来存储二进制数据的缓冲区
    原始数据存储在Buffer类实例中，Buffer类似于一个整数数组
    v6.0以前创建Buffer对象直接new Buffer()创建实例，v6.0后使用Buffer.from()接口去创建

    Buffer与字符编码
        Buffer一般用于编码字符的序列
        node.js目前支持的字符编码包括：
            ascii、utf8、utf16le、ucs2(utf16le别名)、base64、latin1、binary(latin1别名)、hex
    创建Buffer类：
        Buffer.alloc(size[, fill[, encoding]])
        Buffer.allocUnsafe(size) - 返回一个指定大小的Buffer实例，但不会初始化
        Buffer.allocUnsafeSlow(size)
        Buffer.from(array) - 返回被array反初始化的新Buffer,array必须为数字，否则被覆盖为0
        Buffer.from(arrayBuffer[, byteOffset[, length]]) - 返回新的与arrayBuffer共享同一内存
        Buufer.from(buffer) - 赋值buffer数据，返回新Buffer实例
        Buffer.from(string[, encoding]) - 返回被string值初始化的新Buffer
    写入缓冲区：
        write(string[, offset[, length]][, encoding]);
            string - 写入缓冲区的字符串
            offset - 缓冲区开始写入的索引值，默认为0
            length - 写入的字节数，默认为buffer.length
            encoding - 使用的编码格式，默认为utf-8
        返回实际写入的大小，超出buffer大小写入部分
    缓冲区中读取数据：
        toString([encoding[, start[, end]]]);
            encoding - 使用的编码格式，默认为utf-8
            start - 指定开始读取索引的位置，默认为0
            end - 结束位置，默认为缓冲区末尾
        解码缓冲区数据并使用指定编码返回字符串
    Buffer对象转JSON对象
        buf.toJSON() - 返回JSON对象
    缓冲区合并：
        Buffer.concat(list[, totalLength]);
            list - 用于合并的Buffer数组列表
            totalLength - 指定合并后Buffer对象总长度
        返回一个新Buffer对象
    缓冲区比较：
        buf.compare(otherBuffer) - 返回一个数值,值小于0，buf在前，大于0.buf在后  ，为0相同
    拷贝缓冲区：
        buf.copy(targetBuffer[, targetStart[, sourceStart, sourceEnd]]);
    缓冲区裁剪：
        buf.slice([start[, end]]); - 返回新的缓冲区
    缓冲区长度：buf.length - 返回Buffer对象所占内存长度

Stream
    抽象接口，流有四种类型:
        Readable - 可读操作
        Writable - 可写操作
        Duplex   - 可读写操作
        Transform- 操作被写入数据，然后读出结果
    所有Stream对象都是EventEmitter的实例，常用事件，
        data - 当有数据可读时触发
        end  - 没有更多数据可读时触发
        error- 在接收和写入过程中发生错误时触发
        finish-所有数据已被写入到底层系统时触发
    
    var fs = require('fs');
    从流中读取数据：
        创建可读流 - var readerStream = fs.createReadStream(string filename); 返回可读流对象
        处理流事件 - data、end、error
    将流写入：
        创建可写流 - var writerStream = fs.createWriteStream(string filename); 返回可写流对象
        处理流事件 - finish、error

    管道流：
        将一个文件数据读取写入到另一个文件 - readerStream.pipe(writerStream);

    链式流：
        链式流一般用于管道操作
        引入zlib模块
        压缩与解压文件:
            分别创建可读流(readerStream)、可写流(writerStream)
            压缩为.gz文件的流 zzlib = require('zlib').createGzip()/解压 .createGunzip()
            利用管道流进行压缩 readerStream.pipe(zzlib).pipe(writerStream);

模块系统
    为让node.js文件能相互调用，引入模块系统
    文件和模块是对应的，一个node.js文件就是一个模块
    创建模块：
        node.js提供了两个对象exports和require;exports是模块公开的接口;require用于获取外部一个模块的接口，即所获取模块的exports对象
        1.通过exports对象把模块成员作为的模块访问接口（用于对外暴露属性和方法）
            exports.变量 = func(){};
        2.使用module.exports = 模块对象（用于暴露对象）
    require方法查找文件，
        1.从文件缓冲缓存中加载
        2.从原生模块中加载，原生模块中优先从原生模块缓存中加载
        3.从文件中加载
    require方法接收参数：
        http,fs,path等原生模块；
        ./mod或者../mod，相对路径的文件模块
        /pathtomodule/mod，绝对路径的文件模块
        mod,非原生模块的文件模块

函数和js函数使用类似

路由
    为路由提供请求的URL和其他需要的GET及POST参数，随后路由需要根据这些数据来执行相应 的代码。
    因此，需要查看HTTP请求，从中提取出请求的URL以及GET/POST参数
    需要的所有数据都会包含在request对象
    引入url模块和querystring模块
        var url = require('url');
        var query = require('querystring');
        url.parse(request.url).pathname  - 解析获取路径
        url.parse(request.url).query     - 解析获取参数
        query.parse(request.url)[参数名]       - 解析获取对应参数名的参数值

全局对象
    全局对象及其属性为全局变量，浏览器js中window为全局对象，node.js中global为全局对象，所有全局变量都为它的属性
    全局变量：1.在最外层定义的变量；2.全局对象的属性；3.隐式定义的变量（未定义直接赋值的变量）
    定义一个全局变量，该变量就是全局对象的属性
    __filename  -  表示当前正在执行脚本的文件名，输出文件的绝对路径
    __dirname   -  表示当前执行脚本所在的目录,输出文件绝对路径不包含文件名
     
    setTimeout(callback, millis) - 在指定毫秒数后执行函数,只执行一次，返回一个定时器标识数
    clearTimeout(t) - 停止setTimeout定时器，参数为定时器返回的标识

    setInterval(callback, millis) - 在指定毫秒数后执行指定函数，周期性执行执行，返回定时器标识
    clearInterval(t) - 停止setInterval定时器，参数为定时器返回标识

    console - 用于提供控制台标准输出
        console.log()   - 该方法接收多个参数，一个参数输出参数的字符串形式，多个参数类似c语言printf()输出格式
        console.err()   - 与console.log()相同只是向标准流错误输出
        console.trace() - 向标准错误流输出当前调用栈
    
    process - 用于描述node.js当前进程状态的对象，提供一个与操作系统的简单接口
        exit - 当进程准备退出时触发
        beforeExit - 当node清空事件循环，没有其他安排时触发
        uncaughtException - 当一个异常冒泡回到事件循环，触发
        signal - 当进程接收信号时触发

        属性：
            stdout      - 标准输出流
            stdin       - 标准输入流
            stderr      - 标准错误流
            argv        - 返回一个数组，由命令行执行脚本时的各个参数组成，第一个成员为node，第二个为脚本文件名，其余成员为脚本参数
            pid         - 当前进程的进程号
            arch        - 当前CPU的架构
            platform    - 运行程序所在的平台系统
        方法：
            cwd() - 返回当前进程的工作目录
            exit([code]) - 使用指定code结束进程
            memoryUsage() - 返回一个对象，描述进程所用的内存情况
            kill(pid[, signal]) - 发送信号给进程

常用工具
    util是node.js核心模块，提供常用函数的集合，用于弥补js的功能
    const util = require("util");

    util.callbackify(original) - 将async异步函数(或者返回值为Promise的函数)转换成遵循异常优先的回调风格的函数
    const callbackFunction = util.callbackify(original) 
    callbackFunction((err, ret) => {
        //
    });
    第一个参数为拒绝原因，第二个参数为解决值

    util.inherits(constructor, superConstructor) - 实现对象间原型继承的函数
    只能继承在原型中定义的函数,属性
    util.inspect(object, [showHidden], [depth], [colors]) - 将任意对象转换为字符串
    
    util.isArray(object) - object是否为数组
    util.isRegExp(object) - object是否为正则表达式
    util.isDate(object) - object是否为日期
    util.isError(object) - object是否是错误对象

文件系统
    文件操作API，引入文件系统模块，
        var fs = require('fs');
    异步和同步：异步方法性能高，速度快，没有阻塞
    
    读取文件：
        fs.readFile(file, [encoding], [callback(err, data)]);不指定编码，第二个参数为回调函数
            callback - 回调函数，两个参数err,data；如果没有encoding，data为Buffer对象，数据存储在缓冲区，否则为解析后的字符串

    写入文件：
        fs.writeFile(file, data[, options], callback);
            file - 文件名
            data - 要写入的数据，可以是String或者Buffer对象
            options - 一个对象{encoding, mode, flag},默认编码utf8,模式0666(可读可写),flag为w
            callback - 一个参数err

    打开文件：
        fs.open(path, flags[, mode], callback(err, fd)); //异步方式打开文件
            path - 文件路径
            flags - 文件打开行为,r读，r+读写，w写，w+读写，a追加，a+读取追加
            mode - 设置文件模式（权限），默认可读可写
            callback - 回调函数，err,fd
    获取文件信息：
        fs.stat(path, callback(err, stats);//异步模式获取信息
            path = 文件路径
            callback - 回调函数，两个参数err,stats(fs.Stats 对象，文件信息)
        stats类中的方法：
            stats.isFile() - 是否是文件
            stats.isDirectory() - 是否是目录
            stats.isBlockDevice() - 是否是字符设备
            stats.isFIFO() - FIFO是UNIX中一种特殊类型命令管道
            stats.isSocket() - 是否是套接字

    打开文件读取文件：
        fs.read(fd, buffer, offset, length, position, callback);//异步模式下读取文件
            fd - 同fs.open()返回的文件描述符
            buffer - 数据写入的缓冲区
            offset - 缓冲区写入的偏移量
            length - 要从文件读取的字节数
            position - 文件读取起始位置
            callback - 三个参数err,bytesRead,buffer
    关闭文件：
        fs.close(fd, callback);//异步模式关闭文件
    文件截取：
        fs.ftruncate(fd, len, callback);
            len - 文件截取长度
    删除文件：
        fs.unlink(path, callback);
    创建目录：
        fs.mkdir(path[, options], callback);
            options - recursive 是否递归创建目录，默认false
    读取目录：
        fs.readdir(path, callback);
            callback - 连个参数，err,files
    删除目录：
        fs.rmdir(path, callback);

GET/POST请求
    获取GET请求内容：
        GET请求内容在浏览器地址栏上包括？后的参数
        获取URL的参数：
            引入url模块，var url = require('url');
            var URL = url.parse(req.url, true) - 解析url为URL对象
            URL.query[参数] - 获取对应参数值
            URL.pathname - 获取地址路径
            URL.port - 获取端口
    获取POST请求内容：
        POST请求内容全部在请求体中

OS模块
    os模块提供了一些基本的系统操作函数，引入该模块
        require('os');
    方法：
        os.tmpdir() - 返回操作系统的默认临时文件夹
        os.endianness() - 返回cpu字节序，可能是BE或LE
        os.hostname() - 返回操作系统主机名
        os.type() - 返回操作系统名
        os.platform() - 编译时操作系统名
        os.arch() - 操作系统cpu架构，可能x64、arm、ia32
        os.release() - 操作系统发行版本
        os.uptime() - 操作系统运行时间
        os.loadavg() - 返回一个包含1、5、15分钟平均负载的数组
        os.totalmen() - 系统内存总量
        os.freemen() - 空闲内存
        os.cpus() - 对象数组，每个cpu信息
        os.networkInterfaces() - 网络接口列表

多线程
    node.js是单线程模式运行，但它使用事件驱动来处理并发，有助于创建多个子进程提高性能
    子进程带有三个流对象：child.stdin,child.stdout,child.stderr
    Node提供了child_process模块创建子进程，方法：
        exec() - child_process.exec() 使用子进程执行命令，缓存子进程的输出，并将子进程输出以回调函数参数的形式返回
        spawn() = child_process.spawn() 使用指定命令行参数创建新进程
        fork() - child_process.fork() 是spawn() 特殊形式用于在子进程中运行的模块。
            会在父进程和子进程之间，建立通信管道，用于进程间通信
            如：fork('./son.js')相当于spawn('node', ['./son.js'])

    