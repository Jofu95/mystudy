js内置对象：
    Array对象：用于在变量中存储多个值
        创建方式：new Array(2,'a',...)、[3,'2',...]
        属性：
        - constructor 返回创建数组对象的原型函数
        - length 返回数组长度
        - Array.prototype 向数组对象添加属性或方法
        方法：
        - concat(arr1,arr2,..) 链接两个或更多数据，返回新数组
        - every()  检测数组每个元素是否符合条件(通过函数提供),都满足返回true，否则false
        - some()   和every()类似，只是检测规则只要有一个满足就返回true
        - filter() 检测元素，返回符合条件(通过函数提供)的所有元素组成的的数组
        - find()   检测数组，返回符合条件的一个元素(多个符合也返回一个)
        - forEarch() 遍历数组，内嵌函数参数value,index
        - indexOf(value) 返回元素对应索引
        - Array.isArray(arr)   判断是否为数组
        - join()   将数组所有元素放入一个字符串，并返回该字符串[1,2] => "1,2"
        - push()   向数组添加一个或多个元素到数组末尾，返回新数组长度   
        - pop()    删除数组最后一个元素，返回删除元素
    
    Boolean对象：用于将非布尔值转为布尔值
        创建方式：new Boolean()、true/false
        属性：
            - constructor 返回创建此对象的原型函数
            - Boolean.prototype 向对象添加属性或方法
        方法：
            - toString() 
            - valueOf()
        0,false,null,undefined,"",NaN转为布尔值为false，其他为true

    Date对象：用于处理日期和时间
        创建方式：new Date()
        属性：
            - Date.constructor 创建此对象的Date函数的引用
            - Date.prototype 向对象添加属性或方法
        方法：
            - getDate() 从Date对象中返回一个月中的某一天（1-31）
            - getDay()  从Date对象中返回一周中的某一天（0-6）
            - getFullYear() 从Date对象中返回四位数年份
            - getMonth() 从Date对象中返回月份(0~11,要+1)
            - getHours() 从Date对象中返回小时部分（0~23）
            - getMinutes() 从Date对象中返回分钟部分（0~59）
            - getSeconds() 从Date对象中返回秒部分（0~59）
            - getTime() 返回Date对象的毫秒数
            - toLocaleString()  根据本地格式把Date对象转为字符串

    Math对象：用于执行数学任务
        没有构造函数
        属性：
            - Math.PI 返回圆周率
        方法： 
            - Math.abs(x) 返回x的绝对值
            - Math.ceil(x)返回x向上取整
            - Math.floor(x)返回x向上取整
            - Math.pow(x,y) 返回x的y次幂
            - Math.random() 返回0~1的随机数，不包括1
            - Math.round(x) 返回x的四舍五入
            - Math.sqrt(x)  返回x的平方根
    
    Number对象：原始数值的包装对象
        创建方式：new Number(value)
        属性：
            - Number.constructor 创建此对象的Number函数的引用
            - Number.MAX_VALUE   可表示的最大数
            - Number.MIN_VALUE   可表示的最小数
            - Number.NaN         非数字
            - Number.prototype   向对象添加属性或方法
        方法： 
            - Number.isFinite()  检测指定参数是否为无穷大
            - toFixed(n) 将数字转化为字符串，保留指定位小数
            - toPrecision(n) 将数字格式化为指定长度
            - toString()  将数字转换为字符串
            - Number.isInteger() 判断指定数字是否为整数

    String对象：用于处理文本
        创建方式：new String()
        属性：
            - constructor 创建此对象函数的引用
            - length 返回字符串长度
            - String.prototype 向对象添加属性或方法
        方法：
            - charAt(index)  返回指定索引的字符
            - concat(str1, str2,...) 链接两个或多个字符串
            - indexOf(str)  返回字符或字符串首次出现的位置索引
            - includes(str) 判断字符串是否包含某个子字符串
            - lastIndexOf(str) 某个子字符串最后一次出现的位置索引
            - match(regExp) 根据正则匹配一个或多个，将结果存储在数组并将数组返回
            - slice(start, end)  提取字符串片段，并返回（单个参数为负数为倒数位截取）
            - substring(from, to) 从指定位置到指定位置结束截取子串,不能为负数，后者索引小于前者索引互换截取 
            - split("")   把字符串分隔为字符串数组,包括空格
            - substr(start, length) 提取指定位置，指定长度的子串，单个参数指定位置到剩余部分，为负数倒数位置截取
            - startsWith(str) 是否以指定子串开头
            - endsWith(str) 是否以指定子串结尾
            - trim()        去除字符串两端空格
    


js全局函数：
    encodeURI(uri)       把字符串编码为URI,对; , / ? : @ & = + $ #不会转义
    decodeURI(uri)       解码某个编码的URI

    encodeURIComponent(uri) 把字符串作为URI组件进行编码，不会对ASCII字母和数字进行编码，也不会对- _ . ! ~ * ' ( )
    decodeURIComponent(uri) 解码一个编码的URI组件



浏览器对象：
    Window对象：表示浏览器中打开的窗口
        如果文档中包含框架(<frame>或<iframe>标签)，浏览器会为HTML文档创建一个Window对象，并为每个框架创建一个Window对象
        属性：
            - closed    判断窗口是否关闭
            - document  对Document对象的制度引用
            - history   对History对象的只读引用
            - innerHeight 返回窗口文档显示区的高度
            - innerWidth  返回窗口显示区的宽度
            - navigator   对Navigator对象的只读引用
            - outerHeight 返回窗口外部高度，包括滚动条和工具条
            - outerWidth 返回窗口外部宽度，包括滚动条和工具条
            - localStorage 浏览器中存储key/value对，没有过期时间
            - sessionStorage 浏览器中存储key/value对，窗口关闭或标签页关闭删除数据
            - top 返回顶层父窗口
        方法：
            - alert() 带有消息和确认按钮的警告框
            - close() 关闭当前窗口
            - clearTimeout() 
            - clearInterval()
            - confirm() 带有取消和确认按钮的对话框，确认返回true,取消返回false
            - open() 打开一个新的浏览器窗口或指定窗口
            - prompt() 显示可提示用户输入的对话框
            - setTimeout()
            - setInterval()
    
    Navigator对象：包含有关浏览器的信息
    
    Screen对象：包含有关客户端显示屏幕的信息

    History对象：包含用户访问过的URL
        方法：
            - back()  加载history列表中的前一个URL
            - forward() 加载history列表中的下一个URL
            - go()     加载history列表中的某个具体页面
    
    Location对象：包含有关当前URL的信息
        属性：
            - location.hostname 获取URL主机名
            - location.href 获取URL
            - location.pathname 获取URL路径
            - location.port 获取端口号
            - location.protocl 获取协议
            - location.search 获取查询部分
        方法：
            - reload() 重新加载当前文档



HTML DOM(文档对象模型):是HTML和XML的编程接口，定义了访问和操作HTML文档的标准方法
    当网页加载时，浏览器会创建页面的文档对象模型
    DOM标准被分为三种不同的部分：
        核心 DOM  - 针对任何结构化文档的标准模型
        XML DOM  - 针对XML 文档的标准模型
        HTML DOM - 针对HTML 文档的标准模型
    节点：HTML文档的所有内容都是节点
        整个文档是文档节点、每个元素是元素节点、元素内文本是文本节点、元素属性是属性节点、注释是注释节点
        顶端节点为根节点(root),没有父节点，其余的节点都有父节点
        一个节点可以拥有任意数量的子节点，同胞节点有相同的父节点
        所有的HTML节点(元素)被定义为对象，编程接口则是对象的方法和属性
    
    Document对象：
        浏览器载入HTML文档，会成为Document对象使我们能通过脚本对HTML页面所有元素进行访问，是HTML文档根节点
        属性：
            - document.body    返回文档body元素
            - document.cookie  设置或获取与当前文档有关的所有cookie
            - document.documentElement 返回文档根节点（整个文档）
            - document.forms   返回文档中所有form对象的引用
            - document.images  返回文档中所有image对象的引用
        
        方法：
            - document.addEventListener()   向文档添加句柄  document.addEventListener('click', callback)
            - document.open()    打开一个流，收集document.write()的输出
            - document.close()   关闭用document.open()打开的输出流
            - document.createAttribute()  创建一个属性节点
            - document.createElement() 创建一个元素节点
            - document.createTextNode() 创建一个文本节点
            - document.getElementById(id) 通过id查找HTML元素
            - document.getElemensByTagName(标签名) 通过标签名查找HTML元素
            - document.getElemensByClassName(类名) 通过类名查找HTML元素
            - document.querySelector()  根据css选择器查找匹配的一个元素
            - document.querySelectorAll() 根据css选择器查找匹配的所有元素
            - docuMent.removeEventListener() 移除句柄
            - document.write() 文档写HTML表达式或js代码

    Element对象：
        元素对象可以是的子节点可以是元素节点、文本节点、注释节点
        NodeList对象代表节点列表
        属性：
            - attributes    返回元素属性数组
            - childNodes    返回元素子节点的数组
            - className     返回或设置元素的class属性
            - firstChild    返回元素第一个子节点
            - id            获取元素id属性值
            - innerHTML     设置或返回元素内容(内容包括元素、文本节点、注释节点)
            - nodeName      返回元素标签名
            - parentNode    返回元素父节点
            - nextElemnetSibling   返回下一个兄弟元素
            - previosElementSibling 返回上一个兄弟元素
            - style.cssAttr  返回或设置元素样式

        方法：
            - addEventListener()  给元素添加事件句柄
            - appendChild(node)   为元素添加子元素
            - focus()             元素获取焦点
            - getAttribute(attr)  获取元素属性值
            - getAttributeNode(attr)  获取指定属性节点
            - setAttribute(attr, value) 设置元素属性和属性值
            - setAttributenNode(attrnode) 设置属性节点 
            - insertBefore(newNode, existNode)  在某个元素子元素前插入元素
            - removeChild(node)     删除一个子节点
            - removeEventListener() 删除事件句柄

    Attributes对象：
        Attr对象代表一个HTML属性
        NamedNodeMap对象表示一个无顺序的节点列表
        属性：
            - name      返回属性的名
            - value     返回或设置属性值
        
    Events对象：
        事件通常与函数结合，函数不会在事件前被执行
        HTML DOM事件允许js在HTML文档元素中注册不同的事件处理程序
        鼠标事件：
            - onclik      用户点击某个对象时调用
            - ondblclick  用户双击某个对象时调用
            - onmouseup   鼠标按钮松开
            - onmousedown 鼠标按钮被按下
            - onmouseleave鼠标离开元素时
            - onmousemove 鼠标移动时
            - onmouseover 鼠标移动到元素上
            - onmouseout  鼠标从元素上移开
        键盘事件：
            - onkeydown   键盘某个按键被按下
            - onkeypress  键盘某个按键按下并松开时
            - onkeyup     键盘某个按键松开时
            属性：
                - event.keyCode 键盘码
                - which
        对象事件：
            - onerror     当加载文档或图象时出错
            - onload      页面或图像加载时触发
            - onpageshow  用户访问页面时触发
            - onresize    当窗口或框架被重新调整大小时
        表单事件：
            - onblur      元素失去焦点时触发
            - onchange    元素内容改变时触发
            - onfocus     元素获得焦点时
            - oninput     用户输入时触发
            - onsubmit    表单提交时触发
        拖动事件：
            在拖放过程中，会触发以下事件：
                拖动的目标上触发的事件(源元素)：
                    - ondragstart 元素开始被拖动时触发 ev.dataTransfer.setData('Text', event.target.id)
                    - ondrag      元素正在被拖动时触发
                    - ondragend   元素拖动完成时触发
                释放目标时触发的事件：
                    - ondragenter 拖动元素进入被放置的目标时触发
                    - ondragover  拖动的元素在放置的目标上时触发 
                        ev.preventDefault();
                    - ondragleave 拖动的元素离开放置目标时触发
                    - ondrop      拖动的元素放置在目标区域时触发
                        ev.preventDefault();
                        ev.dataTransfer.getData('Text');
                        ev.target.appendChild(document.getElementById(data))
        事件属性：
            - event.target  触发此事件的元素
        事件方法：
            - event.preventDefault()  阻止默认事件的触发
            - event.stopPropagation() 阻止冒泡行为
        

        
            
        