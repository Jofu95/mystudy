CSS用于控制网页的样式和布局
CSS3为最新标准
CSS3已完全向后兼容

一些重要的CSS3模块：
    选择器、盒模型、背景和边框、文字特效、2D/3D转换、动画、多列布局、用户界面

CSS3边框：
    创建圆角边框、添加阴影框
    border-raduis、box-shadow、border-image
    圆角：
        border-raduis: apx;             四个角
        border-raduis: apx bpx;         左上右下、左下右上
        border-raduis: apx bpx cpx;     左上、左下右上、右下
        border-raduis: apx bpx cpx dpx; 左上、右上、右下、左下
    盒阴影：
        box-shadow: x y blur color;x水平阴影，y垂直阴影，blur模糊距离
    边框图片：
        border-image:url() 
    
CSS3背景：
    背景图片：
        background-image: url(1.jpg);
        多个图片用逗号隔开 background-image: url(1.jpg), url(2.jpg);
    背景图大小
        background-size: wpx|% hpx|%;指定背景图的大小
        background: url() no-repeat x y / size;
    背景图放置位置：
        background-origin: content-box; 背景图放置在content中
        background-origin: padding-box; 背景图放置在padding中
        background-origin: border-box;  背景图放置在border中
    背景图剪裁：
        background-clip: content-box; 剪裁content外的padding、border
        background-origin: padding-box; 剪裁padding外的border
        background-origin: border-box; 剪裁padding外的

CSS3渐变：
    线性渐变（linear gradients）:向下/上/左/右/对角方向
        background-image: linear-gradient([direction,] color1, color2,...); 默认从上到下
            direction: to top|right|left|bottom [...]
            direction: xdeg (x为度数，deg为角度)
        background-image: repeating-linear-gradient(direction, color1, color2,...);重复线性渐变
    透明度：
       用于创建减弱变淡的效果
       使用rgba(),最后一个参数表示透明度，0-1，0表示完全透明
    径向渐变（radial gradients）:由它们的中心定义
        background-image: radial-gradient([shape,] colo1, color2,...); 默认从中心向四周
        background-image: radial-gradient([shape,] colo1 x%, color2 y%,...); 不均匀分配
            shape: circle|ellipse

CSS3文本效果：
    文本阴影：
        text-shadow: x y blur color; x水平阴影，y垂直阴影，blur模糊距离
    文本溢出：
        white-space: nowrap;
        overflow: hidden;
        text-overflow: clip | ellipse;   //裁剪隐藏 | 省略号

CSS3字体：
    @font-face规则
    使用字体：
        @font-face{
            font-family: fontname;//定义
            src: url(xxx);//xxx指字体文件
        }

        font-family: fontname;//使用

CSS3 2D转换：（transform）
    转换可对元素进行移动、缩放、转动、拉长或拉伸
    移动：
        transform: translate(x, y);根据x轴和y轴给定的参数，从当前位置移动
        transform: translateX();
        transform: translageY();
    旋转：旋转一定度数
        transform: rotate(ndeg);//deg为度数，给定角度平面旋转元素，负值逆时针旋转.
    缩放：
        transform: scale(n); 一个参数，宽高等比缩放
        transform: scale(x,y); 改变元素的宽度和高度
        transform: scaleX(n)
        transform: scaleY(n)
    倾斜：
        transform: skew(xdeg, ydeg) 沿着x轴和y轴倾斜一定角度,第二个参数为空，默认为0
        transform: skewX(ndeg)
        transform: skewY(ndeg)
    matrix(),六个参数，包含旋转、缩放、移动、倾斜

    transform-origin: x y z;旋转元素的旋转基点默认center center 0（50% 50% 0）

CSS3 3D转换：
    transform: rotateX(ndeg)  沿着x轴内外旋转
    transform: roteteY(ndeg)  沿着y轴左右旋转
    transform-style: preserve-3d; 3d空间
    perspective: npx; 元素距离视图的距离，不设置在3d元素本身






CSS3 多列：
    多列属性：
        column-count: n; 指定需要分割的列数
        column-gap: npx; 指定列与列的间隙
        column-rule-style: solid| dotted | dashed | double;列与列的边框
        column-rule-width: npx; 列与列边框的宽度
        column-rule-color: color; 列与列边框颜色
        column-rule: 
        column-span: all; 跨整行
    
CSS3 调整尺寸：
    resize: both;
    overflow: auto;
    //元素可以由用户调整大小
    box-sizing: border-box;//调整放框大小
    默认情况下，设置一个元素的宽高会加上内边距和边框宽，最终元素的宽高不是设置的，而是比实际要大。
    会影响界面布局，而使用box-sizing: border-box;会以实际宽高显示，只是将内容宽高压缩

CSS3 外形修饰：
    轮廓默认在边框边缘
    outline-offset: npx; 轮廓与边框的边缘距离
    轮廓和边框不同：1.轮廓不占用空间 2.轮廓可能为非矩形

CSS3 图片：
    border-raduis: xpx;圆角图片
    border-raduis: 50%;椭圆图片(图片宽高一样为圆形)
    响应式图片：
        max-width: npx;
        height: auto;
    图片滤镜：
        filter: none;
        filter: blur(npx); 高斯模糊效果
        filter: brightness(n%);图片变亮
        filter: drop-shadow(x y blur colr);阴影效果
        filter: opacity(n%); 透明度
        filter: saturate(n%); 饱和度

CSS3 按钮：
    按钮颜色：
        #4caf50  绿色
        #008cba  蓝色
        #f4336   红色
        #e7e7e7  灰色
        #555555  黑色

CSS3 弹性盒子：
    弹性盒子是css3的一种新的布局方式，可适应不同屏幕大小
    弹性盒子由 弹性容器 和 弹性子元素 组成，弹性盒子 只定义了 弹性子元素 如何在 弹性容器 内布局
    弹性容器 通过display: flex| inline-flex;将元素定义为弹性容器
    弹性容器 包含一个或多个 弹性子元素
    弹性子元素 通常在 弹性容器 内一行显示，默认每个容器只有一行

    弹性容器：
        display: flex| inline-flex;将元素定义为弹性容器
        弹性子元素在弹性容器中的排列位置：
            flex-direction: row|row-reverse|column|column-reverse;
                flex-direction: row;左到右水平排列
                flex-direction: column;上到下垂直排列
        弹性子元素左右对齐方式：
            justify-content: flex-start|flex-end|center|space-between|space-around; 
                justify-content: flex-start;默认值，从左到右紧挨排列在一行
                justify-content: center; 弹性子元素居中紧挨着
                justify-content: flex-end; 弹性子元素向行尾紧挨排列
                justify-content: space-between; 左右两侧弹性子元素紧挨左右两侧，中间弹性子元素均匀排列
                justify-content: space-around; 左右两侧弹性子元素距两侧边距为弹性子元素间距的一半分布
        弹性子元素上下对齐方式：
            align-items: flex-start|center|flex-end|baseline|stretch; 
                align-items: flex-start; 上边界排列一行
                align-items: center; 上下居中一行排列
                align-items: flex-end; 下边界排列一行
                align-items: baseline; 基准线对齐
                align-items: stretch; 默认值
        弹性子元素换行方式：
            flex-wrap: nowrap|wrap|wrap-reverse;
                flex-wrap: nowrap; 默认容器单行,会改变弹性子元素宽高
                flex-wrap: wrap; 弹性容器为多行，溢出在新行
                flex-wrap: wrap-reverse;反转排列wrap
        设置各行上下的对齐方式：
            align-content:flex-start|center|flex-end|space-between|space-around

    弹性子元素：
        排序： order: n; 整数定义排序顺序，数值越小排在前面。可为负值
        对齐： margin: auto; 居中对齐
        单个弹性子元素上下对齐方式：
            algin-self: auto|flex-start|center|flex-end|baseline|stretch;
        flex: n;占总元素的空间比率
    
CSS3 多媒体查询:
    CSS3继承了CSS2多媒体类型的所有思想，取代了查找设备的类型，CSS3根据设置自适应显示
    多媒体查询语法：
        @media not|only mediatype and (expressions){
            css代码
        }

        对于移动设备横竖屏幕时：
            orientation: landscape | portrait;作为表达式
            landscape表示横屏；portrait表示竖屏

    不同媒体上使用不同样式文件：
        <link rel="stylesheet" media="mediatype and|not|only (exoressions)" href="xx.css">
    CSS3多媒体类型：
        all         用于所有设备
        print       用于打印机
        screen      用于电脑、平板、智能手机等
        speech      用于屏幕阅读器

Viewport:
    用户网页的可视区域
    设置viewport：
        <meta name="viewport" content="width=devie-width, initial-sacle=1.0" user-scalable=yes|no/>
        width - 控制viewport大小，device-width为设备宽
        initial-scale - 初始缩放比例，即页面第一次加载时的缩放比例
        user-scalable - 是否允许用户手动缩放


            

        