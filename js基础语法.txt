    JavaScrip是一种脚本语言
HTML中的脚本必须位于<script>标签之中，脚本可放置在<head>和<body>部分
外部引入js文件：<script src="xxx.js"></script>

注释：单行注释 // ；多行注释  /* ... */

变量：用于存储信息的容器
    变量必须以字母开头，变量也能用$和_开头，变量对大小写敏感
    声明变量：使用var关键字来声明 var a;可以一条语句多个变量
    赋值： var a; a = 1; 或者 var a = 1;
    const关键字用来声明常量，常量值不能重新赋值来改变，也不能重复声明
    let变量允许声明一个作用域被限制在块级中的变量、语句或者表达式，在函数中推荐使用let声明变量
    var声明的变量作用范围是整个封闭函数，let声明的变量只在其声明的块或子块中可用

数据类型：
    值类型（基本类型）：字符串（String）、数字(Number)、布尔(Boolean)、空(Null)、未定义(Undefined)、Symbol
    引用数据类型：对象（Object）、数组(Array)、函数(Function)
    动态类型：相同的变量用作不同的类型
    
    1.字符串：存储字符的变量，引号中的任意文本，单引号和双引号都可以。引号内使用不同的引号，'a21c',"你"
    2.数字：可以是整数，也可以是浮点数，123，23.34
    3.布尔：只有两个值， true或false
    4.数组：用中括号括起来，不同元素用逗号隔开，[1,4,5,7]
    5.对象：花括号括起来，属性以键值对的形式存在，键值用冒号分隔，属性与属性用逗号隔开， {name: 'a', age: 23}
    声明变量类型用 new 关键字
    基本类型变量存储在栈内存中，引用类型变量存储在堆内存中；
    栈内存中保存了变量标识符和指向堆内存中该对象的指针，堆内存中保存的对象的内容

数组：
    数组创建：1.new Array(v1,v2,v3,...)；2.[v1,v2,v3,...]；
    获取数组长度 length

对象：拥有属性和方法的数据，几乎所有的事物都是对象
    对象创建：{属性1: 值1, 属性2: 值2,...}
    访问对象属性：1.对象变量.属性名；2.对象变量['属性名']
    访问对象方法：对象变量.方法名()

函数：由事件驱动或者被调用时执行的可重复使用的代码块
    语法：function funname(var1, var2,...){
        //执行代码
        [return]
    }
    调用函数时，会执行函数代码内容
    函数内声明的变量为局部变量，只能作用于当前函数内
    函数外声明的变量为全局变量，作用于全局
    非严格模式下，给未声明的变量赋值创建的全局变量，是全局对象的可配置属性，可以删除delete
    ES6新增是用箭头函数替换传统定义函数
    一个参数时： param => { ... }
    多个参数时： (...params) => { ... }


字符串：存储字符的变量，引号中的任意文本，单引号和双引号都可以。引号内使用不同的引号，
    字符串长度：length属性
    字符串索引从0开始，可通过下标获取字符串中对应字符
    特殊字符串用转义字符进行转义，如" \"age\": 23 ",双引号内不能有双引号，需转义
    常用的转义字符，\'  \"  \\  \n  \t  \r

    常用方法：
        charAt(index)             返回指定索引位置的字符
        concat(str1, str2,...)    连接字符串，返回连接后新的字符串
        indexOf(str)              返回指定字符串第一次出现的位置索引,没有返回-1
        lastIndexOf(str)          返回指定字符串最后一次出现的位置索引,没有返回-1
        match(reg)                找到一个或多个正则匹配
        replace(str, newStr)      用新的字符串替换匹配的子字符串，第一个参数可为具体子字符串或正则，返回替换后的新字符串
        split()                   把字符串分割成字符串数组,返回字符串数组,
            注：split("")分割每个字符，包含空格,第一个参数可为字符串指定字符进行分割，第二个参数为数组最大长度，                         
        slice(start, end)         从指定位置开始结束截取字符串，返回截取部分字符串，包含开始索引不包含结束索引
            注：一个表示从开始位置截取剩余所有部分，为负数表示倒数第几个字符开始截取，位置索引不能超过结束位置索引，否则为空
        substr(start, length)     从指定位置开始，截取指定长度的字符串，返回截取的新字符串
            注：一个参数，直接截取剩余所有部分，如果为负数即倒数第几个字符开始截取字符串            
        substring(from, to)       开始位置到结束位置截取字符串,如果后者比前者小，则调换索引位置位置
        valueOf()                 返回字符串对象的原始值
        trim()                    取出字符串两端空格符
    
运算符：
    算术运算符：+ - * /
    比较运算符：== === != !== > < >= <=
        == 是值相等 === 是值和类型都相等
    逻辑运算符：&& || !

条件语句：
    if...else switch

循环：while、 do...while、 for、 for...in（用于遍历对象）
    break       跳出循环  
    continue    跳过本次执行下一次循环

typeof、 null、 undefined、 instanceof
    typeof用于检测变量的数据类型,除了undefined是undefined类型，数组和null都是object类型，函数是function类型
    null表示一个空对象引用，可用null清空对象,释放内存
    undefined表示一个没有设定值的变量 undefined和null值相等，类型不等
    instanceof判断对象的具体类型，返回布尔值

类型转换：
    六种数据类型：string、number、boolean、object、function、symbol
    三种对象类型：Object、Date、Array
    两种不包含任何值的数据类型：null、undefined
    typeof判断数据类型：
        NaN数据类型是number、Array/Date数据类型是object、函数数据类型是function、null数据类型是object、未定义变量数据类型是undefined
    数字转为字符串：
        1.用连字符 + 与空字符串拼接
        2.全局方法String，String(123)
        3.Number的toString()方法
    布尔值转字符串：
        1.用连字符 + 与空字符串拼接
        2.全局方法String，String(true)
        3.Boolean的toString()方法
    字符串转数字：
        1.全局方法Number()，字符串包含数字转换为数字，空串转为0，包含其他字符转为NaN
        2.parserInt(str)、parseFloat(str)...
    false、0、NaN、""、null、undefined转布尔为false，其余都为true

正则表达式：由一个字符序列形成的搜索模式
    语法： /表达式/[修饰符]
    search() 用于检索字符串中指定的子字符串，或检索与正则匹配的的子字符串，并返回字串起始位置
    replace() 字符串中用一些字符替换另一些字符，或替换正则匹配的子串
    正则修饰符：
        i   - 不区分大小写
        g   = 全局匹配，查找所有
        m   - 执行多行匹配
    表达式模式：
        [abc]  - 查找方括号内的任何字符
        [^abc] - 查找非方括号内的任何字符
        [0-9]  - 查找0-9任何数字
        [a-zA-Z]-查找所有字母中的任何字母 
        \w     - 查找字母
        \d     - 查找数字
        n+     - 匹配任何包含至少一个n的字符串 >=1
        n*     - 匹配任何包含零个或多个n的字符串 
        n?     - 匹配任何包含零个或一个n的字符串 0或1
        n{x}   - 匹配包含x个n的字符串
        n{x,}  - 匹配连续出现至少x个n的字符串
        n{x,y} - 匹配连续出现至少x个n，最多y个n的字符串
        n$     - 匹配任何以n结尾的字符串
        ^n     - 匹配任何以n开始的字符串
    test()用于检测一个字符串是否匹配某个模式，返回布尔值,regExp.test(str)
    exec()检索字符串中的正则的匹配，返回为结果数组，没有为null，regExp.exec(str)

严格模式：
    use strict指令在ECMAScript5中新增，是一个字面量表达式，目的是指定代码在严格条件下进行
    在脚本或函数的头部添加"use strict";表达式来声明严格模式
    1.消除js语法的一些不合理、不严谨之处、减少怪异行为
    2.消除代码运行的一些不安全之处，保证代码运行安全
    3.提高编译器效率，增加运行速度

this关键字：表示当前对象的一个引用
    在方法中，this表示方法所属的对象
    单独使用，this是全局对象
    在事件中，this是接收事件的元素
    apply()和call():能够切换函数执行上下文的环境，即this绑定的对象

JSON(js对象表示法):
    存储和交换文本信息的语法，类似XML
    轻量级的文本数据交换格式
    JSON是纯文本，具有自我描述性，具有层级结构，可通过js解析，可使用Ajax进行传输
    
    语法：键值对形式存储，数据由逗号隔开，大括号保存对象，中括号保存数组(键名在双引号中)
    
    JSON值：数字、字符串(双引号)、布尔值、数组、对象、null
    
    JSON对象：{key1: value1,key2:value2,...}
        key必须是字符串，value是合法的json数据类型值，key和value冒号隔开，每个key/value逗号隔开
        访问对象值：与js对象类似，用.属性或["属性"]
        for-in遍历对象
        可以使用关键字delete删除对象属性
    
    JSON数组：[value1, value2,...]
        value是合法的json数据类型值
        可通过下标来访问数组元素
        for-in遍历数组

    JSON解析：
        JSON常用于与服务器进行数据交换，服务器的数据一般都是字符串
        JSON.parse(text[, reviver])将字符串转化为JSON数据
            - text为有效的JSON字符串
            - reviver，一个转换结果的函数，为对象的每个成员调用此函数
        JSON不能存储Date对象，如需存储，先将其转换为字符串，之后在将字符串转为Date对象
    
    JSON转换：
        JSON.stringify(value[, replacer[, space]]) 将js对象转换为字符串
            - value要转换的js对象(对象或数组)
         JSON不能存储Date对象，JSON.stringify()会将所有日期转换为字符串
        
    eval()用于将JSON文本转换为JS对象，eval("(" + text + ")");文本包含在括号内避免语法错误

    JSONP：是JSON的一种使用模式，可跨域读取数据

href="#"与href="javascript:void(0)":
    href="#",#包含一个位置信息，默认锚是#top也就是网页顶端，可使用#+id定位页面具体内容
    href="javascript:void(0)",仅仅是死链接

异步编程：
    同步在单线程中，程序在指定流程中按顺序执行
    异步不安执行流程运行程序，异步效率更高(异步就是在主线程中，开启一个子线程来完成任务)
    回调函数：实现异步任务的结果处理    

    异步Ajax（异步的js和XML）:用于创建快速动态网页的技术
        Ajax的最大优点是能够在不刷新页面的情况下，可以与服务器进行数据交换，并更新局部内容
        XMLHttpRequest是Ajax的基础
        创建XMLHttpRequest对象：new XMLHttpRequest();
        老版本IE5、6使用ActiveXObject, new ActiveXObject("Microsoft.XMLHTTP");

        open(method, url, async)设置请求类型、url、是否异步处理
            - method:请求类型，GET或POST
            - url:文件在服务器的位置
            - async：true(异步)/false(同步)
        send(string) 发送请求
            - string仅用于POST请求

        POST相比GET更简单更快，大部分情况都可用，以下情况使用POST
            - 无法使用缓存文件(更新服务器上的文件或数据库)
            - 向服务器发送大量数据(POST没有数据量限制)
            - 发送包含未知字符的用户输入时，POST比GET更稳定可靠

        responseText  - 获得字符串形式的响应数据
        responseXML   - 获得xml形式的响应数据
        每当readyState改变时，都会触onreadystatechange事件，readyState存有XMLHttpRequest的状态信息
        readyState    - 从0-4，4为请求完成，响应已就绪
        status        - 200 ok ,  404 未找到页面

Promise（ECMAScript6提供的类）:目的更加优雅的书写复杂的异步任务
    需要多次顺序执行异步操作的时候可使用Promise
    创建一个Promise对象：
        new Promise(function(resolve, reject){
            ...
        });
    Promise的构造函数只有一个参数(起始函数函数)，Promise被构造后，起始函数函数会被异步执行
    起始函数包含两个参数resolve和reject，它们都是函数，作用域为起始函数  ，正常时调用resolve，异常时调用reject
    Promise类有then()、catch()、finally()三个方法，它们的参数都是一个函数，
        then()可将参数中的函数添加当当前Promise正常执行的序列,可返回一个值给另一个then，值为Promise对象,return不能中断then函数
        catch()设定Promise的异常处理序列
        finally()是在Promise执行的最后一定会执行的序列
        new Promise(function(resolve, reject){
            ...
        }).then(function(value){

        })
            ...
        .catch(function(err){
            ...
        }).finally(function(){
            ...
        });





        
    



    



