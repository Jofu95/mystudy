跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，广义的跨域

广义的跨域：
    1）资源跳转：a链接、重定向、表单提交
    2）资源嵌入：<link>、<script>、<img>、<frame>等dom标签，还有样式的background: url()、@font-face()等文件外链
    3）脚本请求：js发起的ajax请求、dom和js对象的跨域操作

通常的跨域是狭义的，是由浏览器同源策略限制的一类请求场景

同源策略/SOP 是一种约定，右Netscape95年引入浏览器，他是浏览器最核心也是最基本的安全功能
如果缺少同源策略，浏览器很容易受到XSS、CSFR等攻击。
所谓同源是指“协议 + 域名 + 端口”三者相同，即便两个不同的域名指向同一个IP地址，也非同源

同源策略限制一下几种行为：
    1） Cookie、LocalStorage和IndexDB无法读取
    2） DOM和js对象无法获得
    3） Ajax请求不能发送

常见跨域场景：
    1. http://www.domain.com/a.js              同一域名不同文件或路径
       http://www.domain.com/b.js                           允许通信
    2. http://www.domain.com:800/a.js          同一域名不同端口        
       http://www.domain.com/b.js                   不允许通信
    3. http://www.domain.com/a.js              同一域名，不同协议
       https://www.domain.com/b.js                    不允许通信
    4. http://www.domain.com/a.js              域名和域名对应相同的IP
       http://192.168.4.12/b.js                           不允许通信
    5. http://www.domain.com/a.js              主域名相同，子域名不同
       http://x.domain.com/b.js                           不允许通信  
    6. http://www.domain1.com/a.js             域名不同
       http://www.domain2.com/b.js             不允许通信

跨域解决方案：
    1.通过jsonp跨域
        jsonp只能实现get请求
    2.document.domain + iframe跨域
        只限于主域名相同，子域不同的跨域请求
        原理：两个页面都通过js强制设置document.domain为基础主域，实现同域
    3.location.hash + iframe跨域
    4.windiw.name + iframe跨域
    5.postMessage跨域
    6.跨域资源共享（CORS）
        普通跨域请求：只服务端设置 Access-Control-Allow-Origin即可，前端不许设置
        若带cookie请求，前后端都要设置（同源策略的原限制，所读取的cookie为跨域请求接口所在域的cookie）
        前端设置：
            jquery:
                $.ajax({
                    xhrFields: {
                        withCredentials: true   //设置是否带cookie
                    }，
                    crossDomain: true  //在请求头中包含跨域信息，不包含cookie
                });
            vue：
                a.axios设置
                    axios.defaults.withCredentials = true;
                b.vue-resource设置
                    Vue.http.options.credentials = true;
        服务端设置：
            
    7.nginx代理跨域
    8.nodejs中间件代理跨域
    9.WebSocket协议跨域 